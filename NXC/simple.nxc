#include "Command/Robot_version2.nxc"
#include "Command/basicCommands.nxc"
#include "Wifi/connexion.nxc"

#define NONE         0
#define FORWARD      1
#define TURN         2
#define FOLLOW_WALL  3
#define CROSSING     4
#define FEEDBACK     5
#define STOP         6
#define TEST         7
#define FIND_CORNER  8

#define STEP_LENGTH    30
#define SENSOR         IN_4

void update_order(int &current_order);

// get orders from the server and execute them
// TODO CHANGE AND USE STACK
void execute_order(int &alerte_bloque){
	string label;
	string value; 
	//int distance_parcourue, alerte_bloque;
	int current_order = 1;
	// you only need to send stop message once, fool!
	bool send_stop = true;
	while(true){
		NumOut(0,LCD_LINE3,current_order);
		int distance;
		int speed;
		int cote;
		int direction;
		int numero_noeud;
		string order = get_order(current_order);
		int test_order = getCommand(order);
		NumOut(0,LCD_LINE5,test_order);
		if (order!="") {
			TextOut(0,LCD_LINE1,order);
		}
		else {
			TextOut(0,LCD_LINE4,"NO PARAMETER");
		}
		// execute order
		 switch(test_order){
			 case NONE         : send_stop = true;current_order=1; break;
			 case FORWARD      : getParameter(order,label,value);
					     distance = atoi(value);
					     sendfeedback("&forward="+NumToStr(distance));
					     foward_clean(distance, alerte_bloque);
					     sendfeedback("&forward="+NumToStr(distance));
					     update_order(current_order);
        				     break;
        		 case TURN         :  getParameter(order,label,value);
        				      int angle = atoi(value);
					      sendfeedback("&turn="+NumToStr(angle));
  					      tourner(angle);
					      sendfeedback("&turn="+NumToStr(angle));
					      update_order(current_order);
        				      break;
        		 case FIND_CORNER  : getParameter(order,label,value); 
					     cote = atoi(value);
					     sendfeedback("&corner="+NumToStr(cote));
					     trouver_coin(cote);
					     sendfeedback("&corner="+NumToStr(cote));
					     update_order(current_order);
        		 case FOLLOW_WALL  : getParameter(order,label,value); 
					     cote = atoi(value);
					     getParameter(order,label,value);
        				     distance = atoi(value);
					     sendfeedback("&followall="+NumToStr(cote)+";"+NumToStr(distance));
  					     follow_wall(cote, distance, STEP_LENGTH, alerte_bloque); 
					     sendfeedback("&followall="+NumToStr(cote)+";"+NumToStr(distance));
					     update_order(current_order);
					     break;
			 case CROSSING     :  getParameter(order,label,value);
					      numero_noeud = atoi(value);
					      getParameter(order,label,value);
					      direction = atoi(value);
					      getParameter(order,label,value);
					      cote = atoi(value);
					      sendfeedback("&crossing="+NumToStr(numero_noeud)+";"+NumToStr(direction)+";"+NumToStr(cote));
					      crossing(numero_noeud, direction, alerte_bloque, cote);
					      sendfeedback("&crossing="+NumToStr(numero_noeud)+";"+NumToStr(direction)+";"+NumToStr(cote));
					      update_order(current_order);
					      break;
			 case FEEDBACK     :  sendfeedback("&distance=5");
					      update_order(current_order);
					      break; // TEST TODO REPLACE / REMOVE
			 case STOP         :  stop_moving();
					      if(send_stop){
						      sendfeedback("&stop=true");
						      send_stop = false;
						      }
					      break;
			 // add your test functions here
			 case TEST         :  if(get_node_state(4)){
						      TextOut(0,LCD_LINE4,"C'est vrai!");
						      set_node_state(4,0);
					      }else{
						      TextOut(0,LCD_LINE4,"C'est faux...");
						      set_node_state(4,1);
					      }
					      //delete_order(1);
					      update_order(current_order);
					     break;
			 default           :  break;
		 }


	}
}

void update_order(int &current_order){
	//delete_order(current_order);
	current_order++;
}

task main(){
	SetSensorLowspeed(SENSOR);                                                       //Pour pouvoir utiliser le Capteur US sur l'entrée 4.
	int alerte_bloque = 0;                                                         //Passe à 1 si le robot rencontre un mêm obstacle pendant plus de 5s
	string my_ip = StrCat(MY_IP,NumToStr(MY_IP_4));
	// delete a command in the server
	delete_url =StrCat(SERVER_ROOT,"/deleteorder.php?target=",my_ip);
	// get orders from the server
	orders_url =StrCat(SERVER_ROOT,"/getorder.php?target=",my_ip);
	// connection to the server
	connect_url =StrCat(SERVER_ROOT,"/connection.php?target=",my_ip);
	// send data to the server
	feedback_url =StrCat(SERVER_ROOT,"/sendfeedback.php?target=",my_ip);
	if (connect()){
		sendfeedback("&online=true");
		execute_order(alerte_bloque);
	} else{
		TextOut(0,LCD_LINE1,"CONNECT ERROR");
	}
}
