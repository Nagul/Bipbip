#include "WifiBlockHelper.nxc"
#include "parsing.nxc"
#include "basicCommands.nxc"
#include "logiciel_embarque_NXC.nxc"

#define MY_IP_4 36
#define MY_IP   "192.168.0."
#define ESSID "freebox_4fantastiques"
#define WIFI_PASSWORD "@enigmA2"

#define WB_PORT IN_4

#define SERVER_ROOT ""

#define NONE         0
#define FORWARD      1
#define TURN         2
#define FOLLOW_WALL  3
#define CROSSING     4
#define FEEDBACK     5
#define STOP         6

#define STEP_SIZE    30
#define NEAR         10


void sendfeedback(string message);

// ip of the server which sends orders
byte server_ip[] = {192,168,0,35};
// list of server links
string stop_url;
string orders_url;
string connect_url;
string feedback_url;

// connection to the local network (WIFI)
bool connect(){
	bool is_connected = false;
	byte ip[]={192,168,0,MY_IP_4};
	byte mask[]={255,255,255,0};
	byte gw[]={192,168,0,254};
	is_connected = quickConnect(WB_PORT,ESSID,WB_SECURITY_WPA,WIFI_PASSWORD,ip,mask,gw);
	if (is_connected){
		quickGET(WB_PORT,server_ip,connect_url);
	}
	return is_connected;
}

// get orders from the server and execute them
// TODO CHANGE AND USE STACK
// TODO DON'T FORGET TO SORT PARAMETERS IN THE SQL REQUEST
void get_order(){
	string label;
	string value; 
	int distance_parcourue, alerte_bloque;
	while(true){
		string order = quickGET(WB_PORT,server_ip,orders_url);
		int test_order = getCommand(order);
		if (order!="") {
			TextOut(0,LCD_LINE1,order);
		}
		else {
			TextOut(0,LCD_LINE2,"NO PARAMETER");
		}
		// execute order
		 switch(test_order){
			 case NONE         :  break;
			 case FORWARD      : getParameter(order,label,value);
					     int power = atoi(value);
  					     avancer(power);
        				     break;
        		 case TURN         : getParameter(order,label,value);
        				     int angle = atoi(value);
  					     tourner(angle);
        				     break;
        		 case FOLLOW_WALL  :  getParameter(order,label,value);
        				      int distance = atoi(value);
        				      getParameter(order,label,value);
        				      int speed = atoi(value);
  					      distance_precise_par_pas(distance, speed, STEP_SIZE, NEAR, distance_parcourue, alerte_bloque); 
					      break;
			 case CROSSING     :  getParameter(order,label,value);
			 // TODO get first parameter
					      getParameter(order,label,value);
			 // TODO
					      int node[]; // TODO get "node" from server
					      break;
			 case FEEDBACK     :  sendfeedback("&distance=5");break; // TEST TODO REPLACE
			 case STOP         :  stop_moving();break;
			 default           :  break;
		 }


	}
}

void sendfeedback(string message){
	quickGET(WB_PORT,server_ip,StrCat(feedback_url,message));
}

task main(){
	string my_ip = StrCat(MY_IP,NumToStr(MY_IP_4));
	// send a stop command to the server
	stop_url =StrCat(SERVER_ROOT,"/giveorder.php?target=",my_ip,"&action=1");
	// get orders from the server
	orders_url =StrCat(SERVER_ROOT,"/getorder.php?target=",my_ip);
	// connection to the server
	connect_url =StrCat(SERVER_ROOT,"/connection.php?target=",my_ip);
	// send data to the server
	feedback_url =StrCat(SERVER_ROOT,"/sendfeedback.php?target=",my_ip);
	if (connect()){
		get_order();
	} else{
		TextOut(0,LCD_LINE1,"CONNECT ERROR");
	}
}
